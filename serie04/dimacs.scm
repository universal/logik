(define (formel->DIMACS formula)
  (string-append (header formula) (clauseset->DIMACS formula)))

(define (header formula)
  (string-append "c generated by formel->DIMACS\n"
                 "p cnf " (number->string (numberOfVars formula)) 
                 " " (number->string (numberOfClauses formula)) "\n"))

(define (clauseset->DIMACS formula)
  (cond ((null? formula) "") 
        ((list? formula) (string-append 
                          (clause->DIMACS (first formula)) 
                          (clauseset->DIMACS (rest formula)) ))))

(define (clause->DIMACS formula)
  (cond ((null? formula) "0\n")
        ((list? formula) (string-append 
                          (number->string (first formula)) " " 
                          (clause->DIMACS (rest formula)))) ))

(define (numberOfVars formula)
  (cond ((null? formula) 0)
        ((list? formula) (max (numberOfVarsInClause (first formula)) 
                              (numberOfVars (rest formula))))))

(define (numberOfVarsInClause clause)
  (cond ((null? clause) 0)
        ((list? clause) (max (first clause) 
                             (numberOfVarsInClause (rest clause))))))

(define (numberOfClauses formula)
  (length formula))

; example
(define example1 
         (list (list 1 2 -3 -4)
               (list -1 -2 5)
               (list 2 3 4)))
(define outputPort (open-output-file "/tmp/dimacs.cnf"))
(display (formel->DIMACS example1) outputPort)
(close-output-port outputPort)
